name: CvApp CI

on:
  workflow_dispatch: # Uruchamianie workflow rÄ™cznie
    
env:
    # credentials for deployment to AWS
    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    # S3 bucket for the terraform state. 
    BUCKET_TF_STATE: ${{ secrets.BUCKET_TF }}
    AWS_REGION: eu-central-1
    SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY}}
    EKS_NAME: cvapp-eks

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    outputs: 
      host_ip: ${{ steps.get_ip.outputs.host_ip }}
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    steps:
      - name: Checkout source code 
        uses: actions/checkout@v4

      - name: Setup Terraform 
        uses: hashicorp/setup-terraform@v3
      
      - name: Decode SSH key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 400 private_key.pem

      - name: Terraform Init
        id: init
        run: terraform init -backend-config "bucket=$BUCKET_TF_STATE"

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -out planfile
        continue-on-error: true 

      - name: Terraform Plan Status 
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve -input=false -parallelism=1 planfile

      - name: Clean up
        if: always()
        run: rm -f private_key.pem

      - name: Get host public IP
        id: get_ip
        run: |
          host_ip=$(terraform output -raw host_public_ip)
          echo "Output $host_ip"
          echo "host_ip=$host_ip" >> $GITHUB_OUTPUT
           

  configure:
    name: "Configure host instance"
    runs-on: ubuntu-latest
    needs: terraform
    outputs: 
      host_ip: ${{ steps.ip.outputs.host_ip }}
    defaults:
      run:
        shell: bash
    steps:      
      - name: Host IP
        id: ip
        run: echo "host_ip=${{ needs.terraform.outputs.host_ip }}" >> $GITHUB_OUTPUT

      - name: AWS Configure
        uses: appleboy/ssh-action@v1.0.3
        id: aws_configure
        
        with:
          host: ${{ needs.terraform.outputs.host_ip }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY}}
          port: 22
          script: |
              sudo chmod +x install.sh
              ./install.sh
              

  create_cluster:
    name: "Create EKS cluster"
    runs-on: ubuntu-latest
    needs: configure

    defaults:
      run:
        shell: bash
    steps:
      - name: Create Cluster
        uses: appleboy/ssh-action@v1.0.3
        id: eksctl
        with:
          host: ${{ needs.configure.outputs.host_ip }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY}}
          port: 22
          script: |
            echo "Create Cluster"
            eksctl create cluster --name $EKS_NAME --region $AWS_REGION --node-type t2.medium --nodes-min 3 --nodes-max 3
            echo "Update Kubeconfig"
            aws eks update-kubeconfig --region $AWS_REGION --name $EKS_NAME
            echo "Approve Oidc"
            eksctl utils associate-iam-oidc-provider --region=$AWS_REGION --cluster=$EKS_NAME --approve
            