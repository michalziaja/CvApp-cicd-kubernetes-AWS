name: CvApp CI

on:
  workflow_dispatch: # Uruchamianie workflow rÄ™cznie

env:
    # credentials for deployment to AWS
    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    # S3 bucket for the terraform state. 
    BUCKET_TF_STATE: ${{ secrets.BUCKET_TF }}
    AWS_REGION: eu-central-1
    SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY}}

jobs:
  terraform:
    name: "Apply terraform code changes"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    steps:
      - name: Checkout source code 
        uses: actions/checkout@v4

      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        id: init
        run: terraform init -backend-config "bucket=$BUCKET_TF_STATE"

      # - name: Terraform Format
      #   id: fmt
      #   run: terraform fmt -check
      #   continue-on-error: true 

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -out planfile
        continue-on-error: true 

      - name: Terraform Plan Status 
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        id: apply
        # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false -parallelism=1 planfile

      - name: Get host public IP
        id: get_ip
        run: |
          echo "::set-output name=host_ip::$(terraform output -json host_public_ip | jq -r '.')"
          
  configure:
    name: "Configure host instance"
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - name: Get host public IP
        id: get_ip
        run: echo ${{ steps.get_ip.outputs.host_ip }}
        
      - name: AWS Configure
        run: |
          ssh -i "$SSH_PRIVATE_KEY" -o StrictHostKeyChecking=no ubuntu@${{ steps.get_ip.outputs.host_ip }} \
            "aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID && \
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY && \
            aws configure set default.region $AWS_REGION"
