name: Infra

on:
  workflow_dispatch: # Uruchamianie workflow rÄ™cznie
    
env:
    # credentials for deployment to AWS
    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    # S3 bucket for the terraform state. 
    BUCKET_TF_STATE: ${{ secrets.BUCKET_TF }}
    AWS_REGION: eu-central-1
    SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY}}
    

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    outputs: 
      host_ip: ${{ steps.get_ip.outputs.host_ip }}
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    steps:
      - name: Checkout source code 
        uses: actions/checkout@v4

      - name: Setup Terraform 
        uses: hashicorp/setup-terraform@v3
      
      - name: Decode SSH key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 400 private_key.pem

      - name: Terraform Init
        id: init
        run: terraform init -backend-config "bucket=$BUCKET_TF_STATE"

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -out planfile
        continue-on-error: true 

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve -input=false -parallelism=1 planfile

      - name: Clean up
        if: always()
        run: rm -f private_key.pem

      - name: Get host public IP
        id: get_ip
        run: |
          echo "host_ip=$(terraform output -raw host_public_ip)" >> $GITHUB_OUTPUT
         # echo "Host_ip $host_ip"
         # echo "host_ip=$host_ip" >> $GITHUB_OUTPUT
           

  configure:
    name: "Configure Host"
    runs-on: ubuntu-latest
    needs: terraform
    outputs: 
      host_ip: ${{ steps.aws.outputs.host_ip }}
    defaults:
      run:
        shell: bash
    steps:      
      - name: AWS Configure
        uses: appleboy/ssh-action@v1.0.3
        id: aws_configure  
        with:
          host: ${{ needs.terraform.outputs.host_ip }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY}}
          port: 22
          env: AWS_REGION,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY
          script: |
              sudo chmod +x install.sh
              ./install.sh
        
      - name: "AWS Configure"
        id: aws
        run: |
          echo "host_ip=${{ needs.terraform.outputs.host_ip }}" >> $GITHUB_OUTPUT
          echo ${{ needs.terraform.outputs.host_ip }}
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 400 private_key.pem
          ssh -i private_key.pem -o StrictHostKeyChecking=no ubuntu@${{ needs.terraform.outputs.host_ip }} "\
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }} && \
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }} && \
          aws configure set region eu-central-1 && \
          aws configure list"

          #rm private_key.pem
  
  create_cluster:
    name: "Create EKS cluster"
    runs-on: ubuntu-latest
    needs: configure
    defaults:
      run:
        shell: bash
    steps:
      # - name: Create Cluster
      #   uses: appleboy/ssh-action@v1.0.3
      #   id: eksctl
      #   with:
      #     host: ${{ needs.configure.outputs.host_ip }}
      #     username: ubuntu
      #     key: ${{ secrets.SSH_PRIVATE_KEY}}
      #     port: 22
      #     #env: EKS_NAME,AWS_REGION,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY
      #     script: |            
      #       echo "Create Cluster"
      #       eksctl create cluster --name cvapp-eks --region eu-central-1 --node-type t2.small --nodes-min 2 --nodes-max 3
      #       echo "Update Kubeconfig"
      #       aws eks update-kubeconfig --region eu-central1 --name cvapp-eks
      #       echo "Approve Oidc"
      #       eksctl utils associate-iam-oidc-provider --region=eu-central-1 --cluster=cvapp-eks --approve

      - name: eks
        id: eks
        run: |
          ssh -i "${{ secrets.SSH_PRIVATE_KEY }}" -o StrictHostKeyChecking=no ubuntu@${{ needs.terraform.outputs.host_ip }} "echo '1'"

          ssh -i "${{ secrets.SSH_PRIVATE_KEY }}" -o StrictHostKeyChecking=no ubuntu@${{ needs.aws.outputs.host_ip }} "\
          #eksctl create cluster --name cvapp-eks --region eu-central-1 --node-type t2.small --nodes-min 2 --nodes-max 2 && \
          #aws eks update-kubeconfig --region eu-central-1 --name cvapp-eks && \
          #eksctl utils associate-iam-oidc-provider --region=eu-central-1 --cluster=cvapp-eks --approve"
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 400 private_key.pem


  # configure_cluster:
  #   name: "Config EKS cluster"
  #   runs-on: ubuntu-latest
  #   needs: ip

  #   defaults:
  #     run:
  #       shell: bash
  #   steps:
  #     - name: Create Cluster
  #       uses: appleboy/ssh-action@v1.0.3
  #       id: eksctl
  #       command_timeout: 1200
  #       with:
  #         host: ${{ needs.terraform.outputs.host_ip }}
  #         username: ubuntu
  #         key: ${{ secrets.SSH_PRIVATE_KEY}}
  #         port: 22
  #         #env: EKS_NAME,AWS_REGION,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY
  #         script: |            
  #           echo "Create Cluster"
  #           eksctl create cluster --name cvapp-eks --region eu-central-1 --node-type t2.small --nodes-min 2 --nodes-max 2
  #           echo "Update Kubeconfig"
  #           aws eks update-kubeconfig --region eu-central1 --name cvapp-eks
  #           echo "Approve Oidc"
  #           eksctl utils associate-iam-oidc-provider --region=eu-central-1 --cluster=cvapp-eks --approve
            