name: CI


on:
  workflow_dispatch: 

# env:
#     # credentials for deployment to AWS
#     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#     # S3 bucket for the terraform state. 
#     BUCKET_TF_STATE: ${{ secrets.BUCKET_TF }}
#     AWS_REGION: eu-central-1


jobs:
  # frontend:
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: ./app/frontend
  #   strategy:
  #     matrix:
  #       node-version: [18.x]
  #   steps:
  #     - name: Check-out git repository  
  #       uses: actions/checkout@v4

  #     - name: USE NODEJS ${{ matrix.node-version }}
  #       uses: actions/setup-node@v4

  #     - name: Install project dependencies 
  #       working-directory: ./app/frontend
  #       run: |
  #         npm i
  #         npm run lint
  #         npm install --save-dev --save-exact prettier
  #         npm run prettier
  #         npm test
  #       env:
  #         CI: true 

  #     - name: Build
  #       run: npm run build
  #       working-directory: ./app/frontend

              # Setup sonar-scanner
      # - name: Setup SonarQube
      #   uses: warchant/setup-sonar-scanner@v8

      # - name: Analyze with SonarCloud
      #   uses: sonarsource/sonarcloud-github-action@master
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #   with:
      #     projectBaseDir: quiz-app
      #     args: >
      #       -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
      #       -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
      #       -Dsonar.host.url=${{ secrets.SONAR_URL }}
      #       -Dsonar.login=${{ secrets.SONAR_TOKEN }}
      #       -Dsonar.sources=src/
      #       -Dsonar.verbose=true

  # backend:

  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: ./app/backend
  #   strategy:
  #     matrix:
  #       python-version: ["3.10"]

  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Set up Python ${{ matrix.python-version }}
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #     # You can test your matrix by printing the current Python version
  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -r requirements.txt
          
  build_and_deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./app/backend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Build Docker image
        run: |
          docker build -t cvapp-web:latest .    

      - name: Tag Docker image
        run: |
          docker tag cvapp-web:latest michalziaja/cvapp-web:${{ github.run_number }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: michalziaja/cvapp-web:${{ github.run_number }}